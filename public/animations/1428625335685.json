{"name":"Blobs","filename":"1428625335685.js","author":"Ben","code":"// example code, renders a basic rainbow\nvar tweenedValues = {\n\thue: 0\n};\n\nvar dt = 0;\nvar lastFrame = 0;\nvar gravity = 0.1;\n\nvar centerX = 52/2, centerY = 34/2;\n\nvar centerPos = new THREE.Vector2(52/2,34/2);\n\nvar m1 = 1, m2 = 1;\n\nvar Blob = function(x,y,radius) {\n    this.radius = radius;\n    this.velocity = new THREE.Vector2(0,0);\n    this.position = new THREE.Vector2(x,y);\n}\nBlob.prototype = {\n    acceleration: function(state, t, dt) {\n        /*var accel = new THREE.Vector2(0,0);\n        accel.subVectors(centerPos, this.position);\n        accel.divideScalar(this.position.distanceToSquared(centerPos));\n        accel.multiplyScalar(dt);\n        return accel;*/\n        var accel = new THREE.Vector2();\n        accel.subVectors(centerPos, this.position);\n        accel.multiplyScalar(0.10);\n        accel.multiplyScalar(dt);\n        return accel;\n    },\n    evaluate: function(initial, t, dt, d) {\n        if (!dt || ! d) {\n            var output = {\n                dx: new THREE.Vector2().copy(initial.v),\n                dv: this.acceleration(initial, t, 0)\n            };\n            return output;\n        }\n        \n        var state = {\n            x: new THREE.Vector2().addVectors(\n                initial.x,\n                new THREE.Vector2().copy(d.dx).multiplyScalar(dt)\n            ),\n            v: new THREE.Vector2().addVectors(\n                initial.v,\n                new THREE.Vector2().copy(d.dv).multiplyScalar(dt)\n            )\n        };\n        var output = {\n            dx: new THREE.Vector2().copy(state.v),\n            dv: this.acceleration(state, t+dt, dt)\n        }\n        return output;\n    },\n    integrate: function(state, t, dt) {\n        var a = this.evaluate(state, t),\n            b = this.evaluate(state, t, dt*0.5, a),\n            c = this.evaluate(state, t, dt*0.5, b),\n            d = this.evaluate(state, t, dt, c);\n            \n        \n        var dxdt = \n            new THREE.Vector2().addVectors(\n                a.dx,\n                new THREE.Vector2().addVectors(\n                    new THREE.Vector2().addVectors(b.dx,c.dx),\n                    d.dx\n                ).multiplyScalar(2.0)\n            ).multiplyScalar(1.0/6.0);\n            \n        var dvdt =\n            new THREE.Vector2().addVectors(\n                a.dv,\n                new THREE.Vector2().addVectors(\n                    new THREE.Vector2().addVectors(b.dv,c.dv),\n                    d.dv\n                ).multiplyScalar(2.0)\n            ).multiplyScalar(1.0/6.0);\n            \n        state.x.add(dxdt);\n        state.v.add(dvdt);\n    },\n    getDensity: function(x,y) {\n        var pos = new THREE.Vector2(x,y),\n            distance = pos.distanceTo(this.position);\n        \n        if (distance > this.radius) {\n            return 0;\n        }\n        \n        var f = distance / this.radius;\n        return Math.pow(1-(f*f), 4);\n    },\n    update: function(t,dt) {\n        this.integrate({x:this.position,v:this.velocity}, t, dt);\n        // dampen velocity\n        this.velocity.multiplyScalar(0.995);\n    }\n};\n\nreturn {\n\tinit: function(display,timeline) {\n\t\tthis.display = display;\n//debugger;\n        this.blobs = [];\n        for (var i=0; i < 10; i++) {\n            this.blobs.push(new Blob(Math.random()*display.cols, Math.random()*display.rows,5+Math.random()*5));\n        }\n        lastFrame = Date.now();\n      \tdisplay.tween(tweenedValues,{\n          to: {hue: 1},\n          duration: 5000,\n          repeat: Infinity,\n          yoyo: true,\n          delay: 0,\n          easing: TWEEN.Easing.Cubic.InOut\n        });\n\t},\n\tonUpdate: function(display, data) {\n\t\tvar c = null;\n\t\tdt = Date.now() - lastFrame;\n\t\tlastFrame = Date.now();\n\t\t\n\t\t// update all the blobs\n\t\tfor (var j=0; j < this.blobs.length; j++) {\n\t\t    this.blobs[j].update(lastFrame/1000, dt/1000);\n\t\t}\n\n\t\tfor (var i=0; i < display.leds.length; i++) {\n\t\t\tvar x = i%display.cols,\n\t\t\t\ty = Math.floor(i/display.cols);\n\t\t\t\t\n\t\t    // loop over all blobs and sum density till we hit 1\n\t\t    var density = 0;\n\t\t    for (var j=0; j < this.blobs.length; j++) {\n\t\t        density += this.blobs[j].getDensity(x,y);\n\t\t    }\n\t\t    density = Math.min(1.0, density);\n\t\t\tc = new Color(0x0);\n\t\t\tvar h = ((tweenedValues.hue))%1,\n\t\t\t\ts = 1,\n\t\t\t\tl =density;\n\t\t\tc.setHSL(h,s,l);\n\t\t\tdisplay.setColor(i, c);\n\t\t}\n\t}\n};","publish":true,"script":{}}